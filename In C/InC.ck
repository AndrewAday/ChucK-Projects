Util util;
public class InC {
  /* static vars: midi, tempo, and togetherness */
  /* static MidiOut @ mout; */
  132 => static float bpm;
  (60. / (8.*bpm))::second => static dur beat;  // seconds per 32nd note
  8::beat => static dur midi_clock_dur; // quarter note clock
  4::beat => static dur pulse_dur;  // 8th note pulse

  // no locks, this is the best we can do
  static int max_pattern;
  5 => static int max_pattern_distance;

  /* Repeat probability parameters */
  static float max_repeat_prob;
  90 => static float x0;
  .8 => static float L;
  .03 => static float k;
  .1 => static float y;

  [
    "",
    "----------------------",
    "--------------------------------------------",
    "------------------------------------------------------------------",
    "----------------------------------------------------------------------------------------",
    "--------------------------------------------------------------------------------------------------------------",
    "------------------------------------------------------------------------------------------------------------------------------------",
    "----------------------------------------------------------------------------------------------------------------------------------------------------------",
    "--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------",
    "------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------",
    "----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------",
    "--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------",
    "------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------",
    "----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------",
    "--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------",
    "------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------"
  ]  @=> string prefixes[];
  [
    [ // [midi note, duration]
      [60, 1],[64, 7],[60, 1],[64, 7],[60, 1],[64, 7]
    ],
    [
      [60, 1],[64, 3],[65, 4],[64, 8]
    ],
    [
      [-1, 4],[64, 4],[65, 4],[64, 4]
    ],
    [
      [-1, 4],[64, 4],[65, 4],[67, 4]
    ],
    [
      [64, 4],[65, 4],[67, 4],[-1, 4]
    ],
    [
      [72, 64]
    ],
    [
      [-1, 28],[60, 4],[60, 4],[60, 4],[-1, 36]
    ],
    [
      [67, 48],[65, 64]
    ],
    [
      [71, 2],[67, 2],[-1, 28]
    ],
    [
      [71, 2],[67, 2]
    ],
    [  // m.11
      [65, 2],[67, 2],[71, 2],[67, 2],[71, 2],[67, 2]
    ],
    [
      [65, 4],[67, 4],[71, 32],[72, 8]
    ],
    [
      [71, 2],[67, 6],[67, 2],[65, 2],[67, 4],[-1, 6],[67, 26]
    ],
    [
      [72, 32],[71, 32],[67, 32],[66, 32]
    ],
    [ // m.15
      [67, 2], [-1, 30]
    ],
    [
      [67, 2],[71, 2],[72, 2],[71, 2]
    ],
    [
      [71, 2],[72, 2],[71, 2],[72, 2],[71, 2],[-1, 2]
    ],
    [
      [64, 2],[66, 2],[64, 2],[66, 2],[64, 6],[64, 2]
    ],
    [
      [-1, 12],[67, 12]
    ],
    [
      [64, 2],[66, 2],[64, 2],[66, 2],[55, 6],[64, 2],[66, 2],[64, 2],[66, 2],[64, 2]
    ],
    [  // m.21
      [66, 24]
    ],
    [
      [64, 4],[64, 4],[64, 4],[64, 4],[64, 4],[64, 4],[64, 4],[64, 4],[64, 4],[64, 4],[64, 4],[64, 4],[64, 4],[64, 4],[64, 4],[66, 4],[66, 4],[66, 4],[67, 4],[67, 4],[67, 4],[69, 4],[69, 4],[69, 4],[71, 4]
    ],
    [
      [64,4],[66,4],[66,4],[66,4],[66,4],[66,4],[66,4],[66,4],[66,4],[66,4],[66,4],[66,4],[66,4],[66,4],[66,4],[66,4],[67,4],[67,4],[67,4],[69,4],[69,4],[69,4],[71,8]
    ],
    [  // m.24
      [64, 4],[66, 4],[67, 4],[67, 4],[67, 4],[67, 4],[67, 4],[67, 4],[67, 4],[67, 4],[67, 4],[67, 4],[67, 4],[67, 4],[67, 4],[67, 4],[67, 4],[69, 4],[69, 4],[69, 4],[71, 4]
    ],
    [
      [64, 4],[66, 4],[67, 4],[69, 4],[69, 4],[69, 4],[69, 4],[69, 4],[69, 4],[69, 4],[69, 4],[69, 4],[69, 4],[69, 4],[69, 4],[69, 4],[69, 4],[69, 4],[71, 4],[71, 4],[71, 4]
    ],
    [
      [64, 4],[66, 4],[67, 4],[69, 4],[71, 4],[71, 4],[71, 4],[71, 4],[71, 4],[71, 4],[71, 4],[71, 4],[71, 4],[71, 4],[71, 4],[71, 4],[71, 4],[71, 4],[71, 4]
    ],
    [  // m.27
      [64, 2],[66, 2],[64, 2],[66, 2],[67, 4],[64, 2],[67, 2],[66, 2],[64, 2],[66, 2],[64, 2]
    ],
    [
      [64, 2],[66, 2],[64, 2],[66, 2],[64, 6],[64, 2]
    ],
    [
      [64, 24],[67, 24],[72, 24]
    ],
    [
      [72, 48]
    ],
    [
      [67, 2],[65, 2],[67, 2],[71, 2],[67, 2],[71, 2]
    ],
    [
      [65, 2],[67, 2],[65, 2],[67, 2],[71, 2],[65, 26],[67, 12]
    ],
    [
      [67, 2],[65, 2],[-1, 2]
    ],
    [
      [67, 2],[65, 2]
    ],
    [  // m.35
      [65, 2],[67, 2],[71, 2],[67, 2],[71, 2],[67, 2],[71, 2],[67, 2],[71, 2],[67, 2],[-1, 28],[70, 8],[79, 24],[81, 4],[79, 8],[83, 4],[81, 12],[79, 4],[76, 24],[79, 4],[78, 28],[-1, 20],[76, 20],[77, 32]
    ],
    [
      [65, 2],[67, 2],[71, 2],[67, 2],[71, 2],[67, 2]
    ],
    [
      [65, 2],[67, 2]
    ],
    [
      [65, 2],[67, 2],[71, 2]
    ],
    [
      [71, 2],[67, 2],[65, 2],[67, 2],[71, 2],[72, 2]
    ],
    [
      [71, 2],[65, 2]
    ],
    [  // m.41
      [71, 2],[67, 2]
    ],
    [
      [72, 32],[71, 32],[69, 32],[72, 32]
    ],
    [
      [65, 2],[64, 2],[65, 2],[64, 2],[64, 4],[64, 4],[64, 4],[65, 2],[64, 2]
    ],
    [
      [77, 4],[76, 8],[76, 4],[72, 8]
    ],
    [
      [74, 8],[74, 8],[67, 8]
    ],
    [
      [67, 2],[74, 2],[76, 2],[74, 2],[-1, 4],[67, 4],[-1, 4],[67, 4],[-1, 4],[67, 4],[67, 2],[74, 2],[76, 2],[74, 2]
    ],
    [
      [74, 2],[76, 2],[74, 4]
    ],
    [  // m.48
      [67, 48],[67, 32],[65, 40]
    ],
    [
      [65, 2],[67, 2],[70, 2],[67, 2],[70, 2],[67, 2]
    ],
    [
      [65, 2],[67, 2]
    ],
    [
      [65, 2],[67, 2],[70, 2]
    ],
    [
      [67, 2],[70, 2]
    ],
    [
      [70, 2],[67, 2]
    ]
  ] @=> int PATTERNS[][][];
  int PATTERN_DURATIONS[PATTERNS.cap()];
  for (int i; i < PATTERNS.cap(); i++) {
    0 => int num_beats;
    for (int j; j < PATTERNS[i].cap(); j++) {
      PATTERNS[i][j][1] +=> num_beats;
    }
    num_beats => PATTERN_DURATIONS[i];
  }
  MidiOut @ mouts[15];
  MidiOut pulse_mout;
  MidiOut clock_mout;

  fun void initMidi(int midi_port, int num_players) {
    pulse_mout.open(midi_port);
    clock_mout.open(midi_port);
    for (int i; i < num_players; i++) {
      new MidiOut @=> mouts[i];
      mouts[i].open(midi_port);
    }
    <<< "connected to midi port " + midi_port >>>;
  }

  fun void play(int midi_channel, int octave) {
    util.synchronize(beat);
    for (int i; i < PATTERNS.cap(); i++) {
      if (i > max_pattern) {
        i => max_pattern;
      }
      PATTERNS[i] @=> int pattern[][];
      <<< prefixes[midi_channel-1], midi_channel, ": playing pattern ", i+1 >>>;
      int num_repeats;
      PATTERN_DURATIONS[i] => int duration;
      64 / duration => int min_repeats;
      y + util.logistic(duration, x0, L, k) => float weighted_prob;
      /* <<< weighted_prob, min_repeats >>>; */
      do {
        /* <<< "repeating ", num_repeats >>>; */
        if (num_repeats > 0 && max_pattern - i > max_pattern_distance) {
          break;
        }
        for (int j; j < pattern.cap(); j++) {
          pattern[j][0] => int midi_note;
          if (midi_note >= 0) {
            pattern[j][0] + (12*octave) => int transposed_midi;
            mouts[midi_channel-1].send(util.getMidiNoteOn(midi_channel, transposed_midi, 100));
            (pattern[j][1]-.5)::beat => now;
            mouts[midi_channel-1].send(util.getMidiNoteOff(midi_channel, midi_note));
            .5::beat => now;
          } else {
            pattern[j][1]::beat => now;
          }
        }
        num_repeats++;
      } while (num_repeats < min_repeats || Math.randomf() > weighted_prob);
    }
  }

  fun void pulse() {
    while (true) {
      pulse_mout.send(util.getMidiNoteOn(16, 84, 100));
      .5::pulse_dur => now;
      pulse_mout.send(util.getMidiNoteOff(16, 84));
      .5::pulse_dur => now;
    }
  }

  fun void clock() {
    while (true) {
      clock_mout.send(util.getMidiClock());
      midi_clock_dur => now;
      clock_mout.send(util.getMidiClock());
    }
  }
}

if (!me.args()) {
  <<< "usage: chuck InC.ck:<midi_port>:<num_players>" >>>;
  me.exit();
}

InC c;

util.STR_TO_INT[me.arg(0)] => int midi_port;
util.STR_TO_INT[me.arg(1)] => int num_players;
c.initMidi(midi_port, num_players);

spork ~ c.clock();
spork ~ c.pulse();
10::c.pulse_dur => now;
for (1 => int i; i <= num_players; i++) {
  spork ~ c.play(i, 0);
}

while (true) {
  1::c.pulse_dur => now;
}
